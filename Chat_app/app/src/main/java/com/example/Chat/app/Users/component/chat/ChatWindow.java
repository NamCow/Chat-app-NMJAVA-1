/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package com.example.Chat.app.Users.component.chat;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.Socket;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;


import java.awt.Color;
import javax.swing.text.BadLocationException;
import javax.swing.text.DefaultHighlighter;
import javax.swing.text.Highlighter;

import javax.swing.JOptionPane;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.text.BadLocationException;
import javax.swing.text.DefaultHighlighter;
import javax.swing.text.Highlighter;

import com.example.Chat.app.Users.database.DatabaseConnection;
import com.example.Chat.app.Users.datastructure.Message;

public class ChatWindow extends javax.swing.JPanel {
    private String userID;
    private String groupID;
    DatabaseConnection db = DatabaseConnection.getInstance();
    private Socket socket;
    private PrintWriter out;
    private BufferedReader in;

    /**
     * Creates new form ChatWindow
     */
    public ChatWindow(String userID, String groupID, Socket socket) {
        this.userID = userID;
        this.groupID = groupID;

        this.socket = socket;
        initComponents();
        connectToServer();
        loadMessages();
        addMouseListenerToButton();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated
    // Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextField1 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jTextField2 = new javax.swing.JTextField();
        jButton4 = new javax.swing.JButton();

        jButton1.setText("Send");

        jButton2.setText("Spam");

        jButton3.setText("DeleteChatHistory");

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jTextField2.setText("");

        jButton4.setText("Search");

        jButton4.addActionListener(e -> {
            String searchText = jTextField2.getText();
            if (!searchText.isEmpty()) {
                searchInChatArea(searchText); // Gọi phương thức tìm kiếm
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout
                                                .createSequentialGroup()
                                                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 250,
                                                        javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(jButton1)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jButton2)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE,
                                                        javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addGroup(layout.createSequentialGroup()
                                                .addComponent(jTextField2)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 90,
                                                        javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addContainerGap()));
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE,
                                                javax.swing.GroupLayout.DEFAULT_SIZE,
                                                javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jButton4))
                                .addGap(2, 2, 2)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 235,
                                        javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE,
                                                javax.swing.GroupLayout.DEFAULT_SIZE,
                                                javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jButton1)
                                        .addComponent(jButton2)
                                        .addComponent(jButton3))
                                .addContainerGap(11, Short.MAX_VALUE)));
    }// </editor-fold>//GEN-END:initComponents

    private void addMouseListenerToButton() {
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
    }

    private void connectToServer() {
        try {
            // Kết nối đến server
            socket = new Socket("localhost", 12345); // Thay localhost bằng IP của server nếu cần
            out = new PrintWriter(socket.getOutputStream(), true);
            in = new BufferedReader(new InputStreamReader(socket.getInputStream()));

            // Gửi userID tới server để đăng ký
            out.println(userID);

            // Lắng nghe tin nhắn từ server
            new Thread(() -> {
                try {
                    String message;
                    while ((message = in.readLine()) != null) {
                        // Hiển thị tin nhắn trong chatArea
                        jTextArea1.append(message + "\n");
                    }
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }).start();

        } catch (IOException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Unable to connect to the server.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void sendMessage(String messageContent) {
        // Định dạng tin nhắn: "senderId|groupId|messageContent"
        String message = userID + "|" + groupID + "|" + messageContent;
        out.println(message); // Gửi tin nhắn tới server

        jTextArea1.append("You: " + messageContent + "\n");

        int userIdInt = Integer.parseInt(userID);
        int groupIdInt = Integer.parseInt(groupID);
        LocalDateTime sentAt = LocalDateTime.now().plusHours(7);
        boolean success = db.saveMessage(userIdInt, groupIdInt, messageContent, sentAt);

        if (!success) {
            JOptionPane.showMessageDialog(this, "Failed to save message to database.", "Error",
                    JOptionPane.ERROR_MESSAGE);
        }
    }

    private void loadMessages() {
        int userIdInt = Integer.parseInt(userID);
        int groupIdInt = Integer.parseInt(groupID);
        // Lấy danh sách tin nhắn
        List<Message> messages = db.getMessagesUser(userIdInt, groupIdInt);

        // Duyệt qua các tin nhắn và thêm vào chatArea
        for (Message message : messages) {
            if (message.isSenderIsUser()) {
                // Tin nhắn của user, hiển thị ở bên phải
                jTextArea1.append("You: " + message.getMessageContent() + "\n");
            } else {
                // Tin nhắn từ người khác, hiển thị ở bên trái

                String senderName = db.getNamebyid(message.getSenderId());
                jTextArea1.append(senderName + ": " + message.getMessageContent() + "\n");
            }
        }
    }

    

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {
        String messageContent = jTextField1.getText();
        int userIdInt = Integer.parseInt(userID);
        int groupIdInt = Integer.parseInt(groupID);
        List<String> friendshipStatuses = db.getFriendshipStatuses(userIdInt, groupIdInt);

        // Kiểm tra nếu có bất kỳ trạng thái nào là "Blocked"
        if (friendshipStatuses.contains("blocked")) {
            // Nếu có trạng thái "Blocked", không cho phép gửi tin nhắn và hiển thị thông
            // báo
            JOptionPane.showMessageDialog(null, "You are blocked and cannot send messages.");
        } else if (!messageContent.isEmpty()) {
            // Nếu không bị Blocked, tiếp tục gửi tin nhắn
            sendMessage(messageContent);
            jTextField1.setText("");
        }
    }

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {
        int userIdInt = Integer.parseInt(userID);
        int groupIdInt = Integer.parseInt(groupID);

        // Call the reportSpamUsers method when Spam button is clicked
        db.reportSpamUsers(userIdInt, groupIdInt);
        JOptionPane.showMessageDialog(null, "Spam reports have been sent.");

    }

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {
        int userIdInt = Integer.parseInt(userID);
        int groupIdInt = Integer.parseInt(groupID);

        int confirm = JOptionPane.showConfirmDialog(null,
                "Are you sure you want to delete your chat history?",
                "Confirm Deletion",
                JOptionPane.YES_NO_OPTION);

        if (confirm == JOptionPane.YES_OPTION) {
            boolean success = db.deleteChatHistory(userIdInt, groupIdInt);
            if (success) {
                JOptionPane.showMessageDialog(null, "Chat history deleted successfully.");
                jTextArea1.setText(""); // Xóa giao diện chat
                loadMessages(); // Tải lại tin nhắn
            } else {
                JOptionPane.showMessageDialog(null, "Failed to delete chat history.", "Error",
                        JOptionPane.ERROR_MESSAGE);
            }
        }

    }

    private void searchInChatArea(String searchText) {
        String content = jTextArea1.getText();
        int index = content.indexOf(searchText);

        if (index != -1) {
            try {

                jTextArea1.setCaretPosition(index);
                jTextArea1.requestFocusInWindow();

                jTextArea1.select(index, index + searchText.length());
            } catch (Exception ex) {
                ex.printStackTrace();
            }
        } else {
            JOptionPane.showMessageDialog(this, "Text not found.");
        }
    }


    public void highlightMessage(String searchText) {
        System.out.println("highlightMessage called with searchText: " + searchText);
        String chatText = jTextArea1.getText();
        int startIndex = chatText.indexOf(searchText);
    
        if (startIndex >= 0) {
            int endIndex = startIndex + searchText.length();
            Highlighter highlighter = jTextArea1.getHighlighter();
            Highlighter.HighlightPainter painter = new DefaultHighlighter.DefaultHighlightPainter(Color.YELLOW);
    
            try {
                highlighter.addHighlight(startIndex, endIndex, painter);
                jTextArea1.setCaretPosition(startIndex);
                System.out.println("Highlight added from " + startIndex + " to " + endIndex);
            } catch (BadLocationException e) {
                e.printStackTrace();
            }
        } else {
            System.out.println("Text not found: " + searchText);
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    // End of variables declaration//GEN-END:variables
}
