/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package com.example.Chat.app.Users.component;

import java.net.Socket;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import javax.swing.DefaultListModel;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import java.awt.BorderLayout;
import com.example.Chat.app.Users.component.group.AddMember;
import com.example.Chat.app.Users.component.group.CreateGroup;
import com.example.Chat.app.Users.component.group.DeleteMember;
import com.example.Chat.app.Users.component.group.IsAdmin;
import com.example.Chat.app.Users.database.DatabaseConnection;
import com.example.Chat.app.Users.component.chat.ChatGroup;
import com.example.Chat.app.Users.component.chat.ChatWindow;
import javax.swing.text.BadLocationException;
import javax.swing.text.DefaultHighlighter;
import javax.swing.text.Highlighter;
// import com.example.Chat.app.Users.userchatapp.ChatWindow;
// import com.example.Chat.app.Users.userchatapp.ChatGroup;

/**
 *
 * @author ASUS
 */
public class UserChatFriend extends javax.swing.JPanel {
    private int userId;
    DatabaseConnection db = DatabaseConnection.getInstance();
    Connection conn = DatabaseConnection.getConnection();
    private Socket socket;
    private String selectedGroupId = null;

    /**
     * 
     * /**
     * Creates new form UserChatFriend
     */
    public UserChatFriend() {
        initComponents();
    }

    public void setId(String userId, Socket socket) {
        this.userId = Integer.parseInt(userId);
        this.socket = socket;
        updateUserList();
        addMouseListenerToList();
    }

    public void updateUserList() {
        List<String> usernames = db.getGroupNamesByUserId(userId);

        DefaultListModel<String> model = new DefaultListModel<>();
        for (String username : usernames) {
            model.addElement(username); // Thêm tên người dùng vào model
        }
        jList1.setModel(model); // Cập nhật JList với model mới
    }

    public List<String> getGroupNamesByMessageAndUser(int userId, String message) {
        List<Integer> groupIds = db.getGroupIdsByMessage(userId, message);
        List<String> groupNames = new ArrayList<>();

        for (int groupId : groupIds) {
            groupNames.addAll(db.getGroupNamesByGroupId(groupId));
        }
        return groupNames;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated
    // Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList<>();
        jLabel8 = new javax.swing.JLabel();
        jPanel12 = new javax.swing.JPanel();
        jPanel13 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jButton8 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jTextField1 = new javax.swing.JTextField();
        jButton4 = new javax.swing.JButton();

        jList1.setBackground(new java.awt.Color(244, 186, 129));
        jScrollPane2.setViewportView(jList1);

        jLabel8.setText("Search message");
        jLabel8.setMaximumSize(new java.awt.Dimension(50, 15));

        jPanel12.setBackground(new java.awt.Color(244, 186, 129));

        jPanel13.setBackground(new java.awt.Color(204, 102, 0));

        jLabel5.setText("Username");

        jLabel6.setForeground(new java.awt.Color(0, 204, 51));
        jLabel6.setText("Online");

        javax.swing.GroupLayout jPanel13Layout = new javax.swing.GroupLayout(jPanel13);
        jPanel13.setLayout(jPanel13Layout);
        jPanel13Layout.setHorizontalGroup(
                jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel13Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED,
                                        javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel6)
                                .addContainerGap()));
        jPanel13Layout.setVerticalGroup(
                jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel13Layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel5)
                                        .addComponent(jLabel6))
                                .addContainerGap(11, Short.MAX_VALUE)));

        jButton3.setText("Open Chat");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton5.setText("Add Group Member");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        jButton6.setText("Delete Group Member");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });
        jButton1.setText("Edit Group Admin");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jButton7.setText("Edit Group Name");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 0, Short.MAX_VALUE));
        jPanel1Layout.setVerticalGroup(
                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 309, Short.MAX_VALUE));

        jButton8.setText("Create New Group");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel12Layout = new javax.swing.GroupLayout(jPanel12);
        jPanel12.setLayout(jPanel12Layout);
        jPanel12Layout.setHorizontalGroup(
                jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jPanel13, javax.swing.GroupLayout.DEFAULT_SIZE,
                                javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel12Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE,
                                        javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addContainerGap())
                        .addGroup(jPanel12Layout.createSequentialGroup()
                                .addGap(12, 12, 12)
                                .addGroup(jPanel12Layout
                                        .createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(jButton5, javax.swing.GroupLayout.DEFAULT_SIZE, 149,
                                                Short.MAX_VALUE)
                                        .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE,
                                                javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE,
                                                javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jButton8, javax.swing.GroupLayout.PREFERRED_SIZE, 149,
                                                javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jButton6)
                                        .addComponent(jButton7, javax.swing.GroupLayout.PREFERRED_SIZE, 149,
                                                javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addContainerGap(250, Short.MAX_VALUE)));
        jPanel12Layout.setVerticalGroup(
                jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel12Layout.createSequentialGroup()
                                .addComponent(jPanel13, javax.swing.GroupLayout.PREFERRED_SIZE,
                                        javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE,
                                        javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jButton3)
                                        .addComponent(jButton8))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jButton5)
                                        .addComponent(jButton6))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jButton1)
                                        .addComponent(jButton7))
                                .addGap(0, 0, Short.MAX_VALUE)));

        jButton2.setFont(new java.awt.Font("Helvetica Neue", 0, 8)); // NOI18N
        jButton2.setText("Search");
        jButton2.setPreferredSize(new java.awt.Dimension(60, 14));

        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });

        jTextField1.setText("Text search");
        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        jButton4.setFont(new java.awt.Font("Helvetica Neue", 0, 8)); // NOI18N
        jButton4.setText("Cancel");
        jButton4.setPreferredSize(new java.awt.Dimension(60, 14));
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout
                                                .createSequentialGroup()
                                                .addContainerGap()
                                                .addGroup(layout
                                                        .createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                        .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE,
                                                                javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                        .addComponent(jTextField1))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addGroup(layout
                                                        .createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE,
                                                                54, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE,
                                                                54, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 177,
                                                javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(12, 12, 12)
                                .addComponent(jPanel12, javax.swing.GroupLayout.DEFAULT_SIZE,
                                        javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)));
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 24,
                                                javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 20,
                                                javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 35,
                                                javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 20,
                                                javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 461,
                                        javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                        .addComponent(jPanel12, javax.swing.GroupLayout.DEFAULT_SIZE,
                                javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE));
    }// </editor-fold>//GEN-END:initComponents

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
    }// GEN-LAST:event_jButton4ActionPerformed

    private void addMouseListenerToList() {
        jList1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                String selectedUsername = jList1.getSelectedValue();
                if (selectedUsername != null) {
                    // Assuming Username is in the first column of the table
                    String groupId = db.getGroupIdByGroupName(selectedUsername);
                    if (!groupId.equals("-1")) {
                        selectedGroupId = groupId;
                    } else {
                        selectedGroupId = null;
                    }
                }
            }
        });
    }

    public void setPanel(JPanel panel) {
        jPanel1.removeAll(); // Clear existing content
        jPanel1.setLayout(new BorderLayout());
        jPanel1.add(panel, BorderLayout.CENTER); // Add new panel
        jPanel1.revalidate(); // Refresh the panel
        jPanel1.repaint(); // Redraw the panel
    }

    private void openGroupChatWindow(String userId, String groupId, Socket socket) {
        ChatGroup chatGroup = new ChatGroup(userId, groupId, socket);
        setPanel(chatGroup); // Set ChatGroup in jPanel1
        // chatGroup.setVisible(true);
    }

    private void openGroupChatWindowWithST(String userId, String groupId, Socket socket, String searchText) {
        ChatGroup chatGroup = new ChatGroup(userId, groupId, socket);
        chatGroup.highlightMessage(searchText);
        setPanel(chatGroup); // Set ChatGroup in jPanel1
        // chatGroup.setVisible(true);
    }

    private void openChatWindow(String senderId, String receiverId, Socket socket) {
        ChatWindow chatWindow = new ChatWindow(senderId, receiverId, socket);
        setPanel(chatWindow); // Set ChatWindow in jPanel1
        // chatWindow.setVisible(true);
    }

    private void openChatWindowWithST(String senderId, String receiverId, Socket socket, String searchText) {
        ChatWindow chatWindow = new ChatWindow(senderId, receiverId, socket);
        chatWindow.highlightMessage(searchText);
        setPanel(chatWindow); // Set ChatWindow in jPanel1
        // chatWindow.setVisible(true);
    }

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {
        if (selectedGroupId != null) {
            int isChatWithUser = db.isChatWithUser(selectedGroupId);

            if (isChatWithUser == 1) {
                openChatWindow(Integer.toString(userId), selectedGroupId, socket);
            } else if (isChatWithUser == 0) {
                openGroupChatWindow(Integer.toString(userId), selectedGroupId, socket);
            } else {
                System.out.println("Cannot identify type of chat " + selectedGroupId);
            }
        } else {
            System.out.println("Cannot find groupId for username: " + selectedGroupId);
        }
    }

    // Add member
    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {
        if (selectedGroupId == null) {
            JOptionPane.showMessageDialog(this, "Please select a group to delete member.", "No Selection",
                    JOptionPane.WARNING_MESSAGE);
            return;
        }

        String checkGroupQuery = "SELECT is_chat_with_user FROM chat_group WHERE group_id = ?";

        try {
            if (conn == null) {
                JOptionPane.showMessageDialog(this, "Failed to establish a database connection.", "Error",
                        JOptionPane.ERROR_MESSAGE);
                return;
            }

            // Check the group type
            try (PreparedStatement pstmtCheck = conn.prepareStatement(checkGroupQuery)) {
                pstmtCheck.setString(1, selectedGroupId);
                try (ResultSet rs = pstmtCheck.executeQuery()) {
                    if (rs.next()) {
                        int isChatWithUser = rs.getInt("is_chat_with_user");
                        if (isChatWithUser != 0) {
                            JOptionPane.showMessageDialog(this, "You cannot add member at a user group.", "Error",
                                    JOptionPane.ERROR_MESSAGE);
                            return; // Stop execution if it's a user group
                        }
                    } else {
                        JOptionPane.showMessageDialog(this, "The selected group does not exist.", "Error",
                                JOptionPane.ERROR_MESSAGE);
                        return; // Stop if the group ID is invalid
                    }
                }
            }

            // Open the IsAdmin panel for the selected group
            JFrame frame = new JFrame("Delete Group Members");
            frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);

            // Create the IsAdmin panel instance
            AddMember AddMemberPanel = new AddMember(userId, selectedGroupId);
            frame.add(AddMemberPanel);

            // Adjust the frame settings
            frame.pack();
            frame.setLocationRelativeTo(this);
            frame.setVisible(true);
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error getting the member's add panel: " + e.getMessage(), "Error",
                    JOptionPane.ERROR_MESSAGE);
        }
    }

    // Delete Group member
    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {
        if (selectedGroupId == null) {
            JOptionPane.showMessageDialog(this, "Please select a group to delete member.", "No Selection",
                    JOptionPane.WARNING_MESSAGE);
            return;
        }

        String checkGroupQuery = "SELECT is_chat_with_user FROM chat_group WHERE group_id = ?";

        try {
            if (conn == null) {
                JOptionPane.showMessageDialog(this, "Failed to establish a database connection.", "Error",
                        JOptionPane.ERROR_MESSAGE);
                return;
            }

            // Check the group type
            try (PreparedStatement pstmtCheck = conn.prepareStatement(checkGroupQuery)) {
                pstmtCheck.setString(1, selectedGroupId);
                try (ResultSet rs = pstmtCheck.executeQuery()) {
                    if (rs.next()) {
                        int isChatWithUser = rs.getInt("is_chat_with_user");
                        if (isChatWithUser != 0) {
                            JOptionPane.showMessageDialog(this, "You cannot delete member from a user group.", "Error",
                                    JOptionPane.ERROR_MESSAGE);
                            return; // Stop execution if it's a user group
                        }
                    } else {
                        JOptionPane.showMessageDialog(this, "The selected group does not exist.", "Error",
                                JOptionPane.ERROR_MESSAGE);
                        return; // Stop if the group ID is invalid
                    }
                }
            }

            // Open the IsAdmin panel for the selected group
            JFrame frame = new JFrame("Delete Group Members");
            frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);

            // Create the IsAdmin panel instance
            DeleteMember DeleteMemberPanel = new DeleteMember(userId, selectedGroupId);
            frame.add(DeleteMemberPanel);

            // Adjust the frame settings
            frame.pack();
            frame.setLocationRelativeTo(this);
            frame.setVisible(true);
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error getting the member's delete panel: " + e.getMessage(), "Error",
                    JOptionPane.ERROR_MESSAGE);
        }
    }

    // Edit group admin
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {
        if (selectedGroupId == null) {
            JOptionPane.showMessageDialog(this, "Please select a group to edit group admins.", "No Selection",
                    JOptionPane.WARNING_MESSAGE);
            return;
        }

        String checkGroupQuery = "SELECT is_chat_with_user FROM chat_group WHERE group_id = ?";

        try {
            if (conn == null) {
                JOptionPane.showMessageDialog(this, "Failed to establish a database connection.", "Error",
                        JOptionPane.ERROR_MESSAGE);
                return;
            }

            // Check the group type
            try (PreparedStatement pstmtCheck = conn.prepareStatement(checkGroupQuery)) {
                pstmtCheck.setString(1, selectedGroupId);
                try (ResultSet rs = pstmtCheck.executeQuery()) {
                    if (rs.next()) {
                        int isChatWithUser = rs.getInt("is_chat_with_user");
                        if (isChatWithUser != 0) {
                            JOptionPane.showMessageDialog(this, "You cannot change the role of a user group.", "Error",
                                    JOptionPane.ERROR_MESSAGE);
                            return; // Stop execution if it's a user group
                        }
                    } else {
                        JOptionPane.showMessageDialog(this, "The selected group does not exist.", "Error",
                                JOptionPane.ERROR_MESSAGE);
                        return; // Stop if the group ID is invalid
                    }
                }
            }

            // Open the IsAdmin panel for the selected group
            JFrame frame = new JFrame("Manage Group Admins");
            frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);

            // Create the IsAdmin panel instance
            IsAdmin isAdminPanel = new IsAdmin(userId, selectedGroupId);
            frame.add(isAdminPanel);

            // Adjust the frame settings
            frame.pack();
            frame.setLocationRelativeTo(this);
            frame.setVisible(true);
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error getting the member's role panel: " + e.getMessage(), "Error",
                    JOptionPane.ERROR_MESSAGE);
        }

    }

    // Change group name
    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {
        if (selectedGroupId == null) {
            JOptionPane.showMessageDialog(this, "Please select a group to alter the group name.", "No Selection",
                    JOptionPane.WARNING_MESSAGE);
            return;
        }

        // Query to check if the selected group is not a user group (is_chat_with_user =
        // 0)
        String checkGroupQuery = "SELECT is_chat_with_user FROM chat_group WHERE group_id = ?";

        try {
            if (conn == null) {
                JOptionPane.showMessageDialog(this, "Failed to establish a database connection.", "Error",
                        JOptionPane.ERROR_MESSAGE);
                return;
            }

            // Check the group type
            try (PreparedStatement pstmtCheck = conn.prepareStatement(checkGroupQuery)) {
                pstmtCheck.setString(1, selectedGroupId);
                try (ResultSet rs = pstmtCheck.executeQuery()) {
                    if (rs.next()) {
                        int isChatWithUser = rs.getInt("is_chat_with_user");
                        if (isChatWithUser != 0) {
                            JOptionPane.showMessageDialog(this, "You cannot alter the name of a user group.", "Error",
                                    JOptionPane.ERROR_MESSAGE);
                            return; // Stop execution if it's a user group
                        }
                    } else {
                        JOptionPane.showMessageDialog(this, "The selected group does not exist.", "Error",
                                JOptionPane.ERROR_MESSAGE);
                        return; // Stop if the group ID is invalid
                    }
                }
            }

            // Prompt for the new group name
            String groupName = JOptionPane.showInputDialog(this, "Enter the new name of the group:", "Edit Group Name",
                    JOptionPane.PLAIN_MESSAGE);
            if (groupName == null || groupName.trim().isEmpty()) {
                JOptionPane.showMessageDialog(this, "Canceled or invalid group name entered.", "Cancelled",
                        JOptionPane.WARNING_MESSAGE);
                return;
            }

            // Query to update the group name
            String updateGroupQuery = "UPDATE chat_group SET group_name = ? WHERE group_id = ?";

            // Update the group name
            try (PreparedStatement pstmtUpdate = conn.prepareStatement(updateGroupQuery)) {
                pstmtUpdate.setString(1, groupName); // New group name
                pstmtUpdate.setString(2, selectedGroupId); // Group ID to update

                int rowsAffected = pstmtUpdate.executeUpdate();
                if (rowsAffected > 0) {
                    JOptionPane.showMessageDialog(this, "Group name updated successfully.", "Success",
                            JOptionPane.INFORMATION_MESSAGE);
                    updateUserList(); // Refresh the group list to reflect the change
                } else {
                    JOptionPane.showMessageDialog(this, "Failed to update group name. The group might not exist.",
                            "Error", JOptionPane.ERROR_MESSAGE);
                }
            }

        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error updating group name: " + e.getMessage(), "Error",
                    JOptionPane.ERROR_MESSAGE);
        }
    }

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {
        // Prompt for the new group name
        String groupName = JOptionPane.showInputDialog(this, "Enter the name of the new group:", "Create Group",
                JOptionPane.PLAIN_MESSAGE);
        if (groupName == null || groupName.trim().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Group creation canceled or invalid group name entered.", "Cancelled",
                    JOptionPane.WARNING_MESSAGE);
            return;
        }

        String insertGroupQuery = "INSERT INTO chat_group (group_name, created_by, is_chat_with_user) VALUES (?, ?, 0)";
        String insertMemberQuery = "INSERT INTO group_members (group_id, user_id, is_admin) VALUES (?, ?, ?)";

        try {
            if (conn == null) {
                JOptionPane.showMessageDialog(this, "Failed to establish a database connection.", "Error",
                        JOptionPane.ERROR_MESSAGE);
                return;
            }

            conn.setAutoCommit(false); // Begin transaction

            int groupId;
            // Insert into chat_group
            try (PreparedStatement pstmtGroup = conn.prepareStatement(insertGroupQuery,
                    Statement.RETURN_GENERATED_KEYS)) {
                pstmtGroup.setString(1, groupName);
                pstmtGroup.setInt(2, userId); // Created by this user
                pstmtGroup.executeUpdate();

                // Retrieve the generated group_id
                try (ResultSet generatedKeys = pstmtGroup.getGeneratedKeys()) {
                    if (generatedKeys.next()) {
                        groupId = generatedKeys.getInt(1);
                    } else {
                        throw new SQLException("Failed to retrieve group_id.");
                    }
                }
            }

            // Insert the current user as the sole member and admin
            try (PreparedStatement pstmtMember = conn.prepareStatement(insertMemberQuery)) {
                pstmtMember.setInt(1, groupId);
                pstmtMember.setInt(2, userId); // Current user's ID
                pstmtMember.setString(3, "yes"); // Admin
                pstmtMember.executeUpdate();
            }

            conn.commit(); // Commit transaction

            JOptionPane.showMessageDialog(this, "Group created successfully.", "Success",
                    JOptionPane.INFORMATION_MESSAGE);

            updateUserList();
            
            // Open the IsAdmin panel for the selected group
            JFrame frame = new JFrame("Add Group Members");
            frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);

            // Create the IsAdmin panel instance
            CreateGroup CreateGroupPanel = new CreateGroup(userId, String.valueOf(groupId));
            frame.add(CreateGroupPanel);

            // Adjust the frame settings
            frame.pack();
            frame.setLocationRelativeTo(this);
            frame.setVisible(true);

        } catch (SQLException e) {
            try {
                if (conn != null) {
                    conn.rollback(); // Rollback transaction on error
                }
            } catch (SQLException rollbackEx) {
                rollbackEx.printStackTrace();
            }
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error creating group: " + e.getMessage(), "Error",
                    JOptionPane.ERROR_MESSAGE);
        } finally {
            try {
                if (conn != null) {
                    conn.setAutoCommit(true); // Reset auto-commit
                }
            } catch (SQLException resetEx) {
                resetEx.printStackTrace();
            }
        }
    }

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
    }// GEN-LAST:event_jTextField1ActionPerformed

    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {
        String searchText = jTextField1.getText();
        if (searchText.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please enter text to search.", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }

        List<String> groupNames = db.getGroupNamesByMessageAndUser(userId, searchText);
        if (groupNames.isEmpty()) {
            JOptionPane.showMessageDialog(this, "No messages found.", "Info", JOptionPane.INFORMATION_MESSAGE);
            return;
        }

        DefaultListModel<String> model = new DefaultListModel<>();
        for (String groupName : groupNames) {
            model.addElement(groupName);
        }
        jList1.setModel(model);

        jList1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                String selectedGroupName = jList1.getSelectedValue();
                if (selectedGroupName != null) {
                    String groupId = db.getGroupIdByGroupName(selectedGroupName);
                    if (!groupId.equals("-1")) {
                        selectedGroupId = groupId;
                        openChatWindowOrGroupChat(searchText);
                    }
                }
            }
        });
    }

    private void openChatWindowOrGroupChat(String searchText) {
        int isChatWithUser = db.isChatWithUser(selectedGroupId);
        if (isChatWithUser == 1) {
            String userID = Integer.toString(userId);
            openChatWindowWithST(userID, selectedGroupId, socket, searchText);
        } else if (isChatWithUser == 0) {
            String userID = Integer.toString(userId);
            openGroupChatWindowWithST(userID, selectedGroupId, socket, searchText);
        }
    }

    private void closeButtonActionPerformed(java.awt.event.ActionEvent evt) {
        /*
         * // Đóng cửa sổ chat hiện tại
         * Window[] windows = Window.getWindows();
         * for (Window window : windows) {
         * if (window instanceof ChatWindow || window instanceof ChatGroup) {
         * window.dispose();
         * }
         * }
         * // Load lại danh sách nhóm
         */
        updateUserList();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JList<String> jList1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
}
