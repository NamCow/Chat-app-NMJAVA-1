/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package com.example.Chat.app.Users.component.group;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

import com.example.Chat.app.Users.database.DatabaseConnection;


public class IsAdmin extends javax.swing.JPanel {
    private int userId = -1;
    private String groupId = null;
    DatabaseConnection db = DatabaseConnection.getInstance();
    Connection conn = DatabaseConnection.getConnection();

    /**
     * Creates new form IsAdmin
     */
    public IsAdmin(int userId, String groupId) {
        initComponents();
        this.userId = userId;
        this.groupId = groupId;
        loadMembers();
    }

    private void loadMembers() {
        if (groupId == null) {
            JOptionPane.showMessageDialog(this, "Group ID is not set. Cannot load data.", "Error",
                    JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Query to fetch group members based on groupId
        String fetchMembersQuery = "SELECT u.username, gm.is_admin " +
                "FROM group_members gm " +
                "JOIN users u ON gm.user_id = u.user_id " +
                "WHERE gm.group_id = ?";

        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        model.setRowCount(0); // Clear existing data

        try (PreparedStatement pstmt = conn.prepareStatement(fetchMembersQuery)) {
            pstmt.setString(1, groupId);

            try (ResultSet rs = pstmt.executeQuery()) {
                while (rs.next()) {
                    String username = rs.getString("username");
                    String isAdmin = rs.getString("is_admin");
                    String role = "yes".equalsIgnoreCase(isAdmin) ? "Admin" : "None";

                    // Add row to the table model
                    model.addRow(new Object[] { username, role });
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error loading group members: " + e.getMessage(), "Error",
                    JOptionPane.ERROR_MESSAGE);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Username", "Role"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jButton1.setText("Set/Unset Admin");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 232, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGroup(layout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addComponent(jButton1))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 272, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1)
                .addGap(0, 8, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {
        // Check if a row is selected
        int selectedRow = jTable1.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Please select a user to change the role.", "No Selection", JOptionPane.WARNING_MESSAGE);
            return;
        }
    
        // Get the username and current role from the selected row
        String username = (String) jTable1.getValueAt(selectedRow, 0);
        String currentRole = (String) jTable1.getValueAt(selectedRow, 1);
    
        // Check if the current user is an Admin
        if (!isCurrentUserAdmin(userId)) {
            JOptionPane.showMessageDialog(this, "You do not have the required privileges to change roles.", "Permission Denied", JOptionPane.WARNING_MESSAGE);
            return;
        }
    
        // Determine the new role
        String newRole = "Admin".equalsIgnoreCase(currentRole) ? "None" : "Admin";
        String isAdminValue = "Admin".equals(newRole) ? "yes" : "no";
    
        // Query to update the role in the database
        String updateRoleQuery = "UPDATE group_members gm " +
                "JOIN users u ON gm.user_id = u.user_id " +
                "SET gm.is_admin = ? " +
                "WHERE gm.group_id = ? AND u.username = ?";
    
        try (PreparedStatement pstmt = conn.prepareStatement(updateRoleQuery)) {
            pstmt.setString(1, isAdminValue);
            pstmt.setString(2, groupId);
            pstmt.setString(3, username);
    
            int rowsAffected = pstmt.executeUpdate();
            if (rowsAffected > 0) {
                JOptionPane.showMessageDialog(this, "Role updated successfully.", "Success", JOptionPane.INFORMATION_MESSAGE);
                loadMembers(); // Refresh the table to reflect changes
            } else {
                JOptionPane.showMessageDialog(this, "Failed to update role. Please try again.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error updating role: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    // Method to check if the current user is an Admin
    private boolean isCurrentUserAdmin(int userId) {
        String checkRoleQuery = "SELECT is_admin FROM group_members gm " +
                "JOIN users u ON gm.user_id = u.user_id " +
                "WHERE gm.group_id = ? AND u.user_id = ?";
    
        try (PreparedStatement pstmt = conn.prepareStatement(checkRoleQuery)) {
            pstmt.setString(1, groupId);
            pstmt.setInt(2, userId);
            
            try (ResultSet rs = pstmt.executeQuery()) {
                if (rs.next()) {
                    String isAdmin = rs.getString("is_admin");
                    return "yes".equalsIgnoreCase(isAdmin);  // Return true if user is an Admin
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error checking user role: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
        return false; // Default to non-admin if role check fails
    }
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
