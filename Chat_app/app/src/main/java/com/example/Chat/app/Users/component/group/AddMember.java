/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package com.example.Chat.app.Users.component.group;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

import com.example.Chat.app.Users.database.DatabaseConnection;


public class AddMember extends javax.swing.JPanel {
    private int userId = -1;
    private String groupId = null;
    DatabaseConnection db = DatabaseConnection.getInstance();
    Connection conn = DatabaseConnection.getConnection();

    /**
     * Creates new form AddMember
     */
    public AddMember(int userId, String groupId) {
        initComponents();
        this.userId = userId;
        this.groupId = groupId;
        loadMembers();
        loadFriends();
    }

    private void loadMembers() {
        if (groupId == null) {
            JOptionPane.showMessageDialog(this, "Group ID is not set. Cannot load data.", "Error",
                    JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Query to fetch group members based on groupId
        String fetchMembersQuery = "SELECT u.username, gm.is_admin " +
                "FROM group_members gm " +
                "JOIN users u ON gm.user_id = u.user_id " +
                "WHERE gm.group_id = ?";

        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        model.setRowCount(0); // Clear existing data

        try (PreparedStatement pstmt = conn.prepareStatement(fetchMembersQuery)) {
            pstmt.setString(1, groupId);

            try (ResultSet rs = pstmt.executeQuery()) {
                while (rs.next()) {
                    String username = rs.getString("username");
                    String isAdmin = rs.getString("is_admin");
                    String role = "yes".equalsIgnoreCase(isAdmin) ? "Admin" : "None";

                    // Add row to the table model
                    model.addRow(new Object[] { username, role });
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error loading group members: " + e.getMessage(), "Error",
                    JOptionPane.ERROR_MESSAGE);
        }
    }

    private void loadFriends() {
        if (userId == -1 || groupId == null) { // Ensure both userId and groupId are set
            JOptionPane.showMessageDialog(this, "User ID or Group ID is not set. Cannot load data.", "Error",
                    JOptionPane.ERROR_MESSAGE);
            return;
        }
    
        // Query to fetch friends who are not in the group
        String fetchFriendsQuery = "SELECT u.username, u.fullname " +
                "FROM users_friend uf " +
                "JOIN users u ON " +
                "(uf.friend_id = u.user_id AND uf.user_id = ?) " +
                "OR (uf.user_id = u.user_id AND uf.friend_id = ?) " +
                "WHERE uf.friendship = 'friends' " +
                "AND u.user_id NOT IN (" +
                "    SELECT gm.user_id " +
                "    FROM group_members gm " +
                "    WHERE gm.group_id = ?" +
                ")";
    
        DefaultTableModel model = (DefaultTableModel) jTable3.getModel();
        model.setRowCount(0); // Clear existing data
    
        try (PreparedStatement pstmt = conn.prepareStatement(fetchFriendsQuery)) {
            pstmt.setInt(1, userId);
            pstmt.setInt(2, userId);
            pstmt.setString(3, groupId);
    
            try (ResultSet rs = pstmt.executeQuery()) {
                while (rs.next()) {
                    String username = rs.getString("username");
                    String fullname = rs.getString("fullname");
    
                    // Add row to the table model
                    model.addRow(new Object[] { username, fullname });
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error loading friends: " + e.getMessage(), "Error",
                    JOptionPane.ERROR_MESSAGE);
        }
    }
    
    
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable3 = new javax.swing.JTable();
        jTextField1 = new javax.swing.JTextField();
        jTextField2 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(jTable2);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Username", "Role"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jTable3.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Username", "Fullname"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(jTable3);

        jTextField1.setText("Group Member");

        jTextField2.setText("Your Friends");

        jButton1.setText("Add Member to Group");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(32, 32, 32)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(layout.createSequentialGroup()
                .addGap(52, 52, 52)
                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(76, 76, 76))
            .addGroup(layout.createSequentialGroup()
                .addGap(139, 139, 139)
                .addComponent(jButton1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 272, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 272, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {
        // Check if a row is selected
        int selectedRow = jTable3.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Please select a friend to add to the group.", "No Selection", JOptionPane.WARNING_MESSAGE);
            return;
        }
    
        // Get the username from the selected row in jTable3
        String username = (String) jTable3.getValueAt(selectedRow, 0);
    
        // Confirm the addition
        int confirmation = JOptionPane.showConfirmDialog(this, "Are you sure you want to add this friend to the group?", "Confirm Addition", JOptionPane.YES_NO_OPTION);
        if (confirmation != JOptionPane.YES_OPTION) {
            return; // Exit if the user cancels the operation
        }
    
        // Query to add the user to the group
        String addUserQuery = "INSERT INTO group_members (group_id, user_id, is_admin) " +
                "SELECT ?, user_id, 'no' FROM users WHERE username = ? AND user_id NOT IN (" +
                "SELECT user_id FROM group_members WHERE group_id = ?)";
    
        try (PreparedStatement pstmt = conn.prepareStatement(addUserQuery)) {
            pstmt.setString(1, groupId);
            pstmt.setString(2, username);
            pstmt.setString(3, groupId);
    
            int rowsAffected = pstmt.executeUpdate();
            if (rowsAffected > 0) {
                JOptionPane.showMessageDialog(this, "Friend added to the group successfully.", "Success", JOptionPane.INFORMATION_MESSAGE);
                loadMembers(); // Refresh the group members table (jTable1)
                loadFriends(); // Refresh the friends table (jTable3) to exclude the added friend
            } else {
                JOptionPane.showMessageDialog(this, "Failed to add the friend to the group. They may already be a member.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error adding friend to the group: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JTable jTable3;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    // End of variables declaration//GEN-END:variables
}
